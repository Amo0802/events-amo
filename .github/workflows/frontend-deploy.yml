name: Deploy Frontend

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: amo0802/events-amo

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.0'
        
    - name: Install dependencies
      run: flutter pub get
        
    - name: Analyze code
      run: flutter analyze

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    # Only deploy on push to main (not on pull requests)
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/amo0802/events-amo
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          API_URL=https://api.arminramusovic.com
        
    - name: Deploy Frontend to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          # Navigate to deployment directory
          cd ~/amo-app/events-amo
          
          # Generate unique container name using git SHA
          CONTAINER_NAME="eventsamo-frontend-${{ github.sha }}"
          CONTAINER_NAME_SHORT="${CONTAINER_NAME:0:12}"
          
          # Login to registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull new frontend image
          docker pull ghcr.io/amo0802/events-amo:latest
          
          # Stop and remove any existing container with this name
          docker stop $CONTAINER_NAME_SHORT 2>/dev/null || true
          docker rm $CONTAINER_NAME_SHORT 2>/dev/null || true
          
          # Create new frontend container with unique name
          docker run -d \
            --name $CONTAINER_NAME_SHORT \
            --network events-amo-backend_traefik-network \
            -e NODE_ENV=production \
            --label "traefik.enable=true" \
            --label "traefik.docker.network=events-amo-backend_traefik-network" \
            --label "traefik.http.routers.$CONTAINER_NAME_SHORT.rule=Host(\`app.arminramusovic.com\`)" \
            --label "traefik.http.routers.$CONTAINER_NAME_SHORT.entrypoints=websecure" \
            --label "traefik.http.routers.$CONTAINER_NAME_SHORT.tls.certresolver=letsencrypt" \
            --label "traefik.http.services.$CONTAINER_NAME_SHORT.loadbalancer.server.port=80" \
            --label "traefik.http.routers.$CONTAINER_NAME_SHORT-http.rule=Host(`app.arminramusovic.com`)" \
            --label "traefik.http.routers.$CONTAINER_NAME_SHORT-http.entrypoints=web" \
            --label "traefik.http.routers.$CONTAINER_NAME_SHORT-http.middlewares=$CONTAINER_NAME_SHORT" \
            --label "traefik.http.middlewares.$CONTAINER_NAME_SHORT.redirectscheme.scheme=https" \
            --label "traefik.http.middlewares.$CONTAINER_NAME_SHORT.redirectscheme.permanent=true" \
            ghcr.io/amo0802/events-amo:latest
          
          # Wait for container to start
          echo "Waiting for new frontend to start..."
          sleep 15
          
          # Test if frontend is responding
          if docker exec $CONTAINER_NAME_SHORT curl -f http://localhost:80; then
            echo "New frontend is responding!"
            
            # Stop old frontend (if exists)
            docker stop eventsamo-frontend 2>/dev/null || true
            docker rm eventsamo-frontend 2>/dev/null || true
            
            # Create alias for the new container
            docker rename $CONTAINER_NAME_SHORT eventsamo-frontend
            
            echo "Frontend deployment completed!"
          else
            echo "New frontend failed to start, rolling back..."
            docker stop $CONTAINER_NAME_SHORT
            docker rm $CONTAINER_NAME_SHORT
            exit 1
          fi